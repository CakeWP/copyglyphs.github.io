{"version":3,"sources":["components/snackbar/style.js","components/snackbar/index.js","components/charmap/index.js","App.js","serviceWorker.js","index.js"],"names":["Snackbar","styled","SnackbarBase","SnackbarContent","SnackbarContentBase","InfoWrapper","span","SimpleSnackbar","status","msg","React","useState","open","setOpen","useEffect","anchorOrigin","vertical","horizontal","autoHideDuration","onClose","event","reason","contentprops","message","id","Charmap","arguments","state","characters","Chars","Misc","keyword","date","copied","filtered","map","character","key","name","toLowerCase","search","Object","assign","this","setState","props","value","isActive","onChange","container","className","placeholder","newKeyword","onSearch","activeClass","onSelect","tab","tabContent","tabs","title","keys","length","text","upperFirst","char","onCopy","Date","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.39899b48.chunk.js","sourcesContent":["import styled from 'styled-components';\nimport SnackbarBase from '@material-ui/core/Snackbar';\nimport SnackbarContentBase from '@material-ui/core/SnackbarContent';\n\nexport const Snackbar = styled(SnackbarBase)`\n  /* >>> */\n`;\nexport const SnackbarContent = styled(SnackbarContentBase)`\n  /* >>> */\n  && {\n    background: #000;\n\tpadding: 0.5rem 1.25rem;\n\tjustify-content: center;\n  min-width: auto;\n  font-size: 16px;\n  }\n`;\n\nexport const InfoWrapper = styled.span`\n  display: flex;\n  align-items: center;\n`;\n\n","import React, { useEffect } from 'react';\n\nimport {\n  Snackbar,\n  SnackbarContent,\n  IconButton,\n  CheckCircleIcon,\n  CloseIcon,\n  ErrorIcon,\n  InfoWrapper\n} from './style';\n\nfunction SimpleSnackbar({ status, msg }) {\n  const [open, setOpen] = React.useState(true);\n  useEffect(() => {\n    setOpen(true);\n  }, [status]);\n\n  function handleClose(event, reason) {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  }\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        vertical: 'bottom',\n        horizontal: 'center'\n      }}\n      open={open}\n      autoHideDuration={2000}\n      onClose={handleClose}\n    >\n      <SnackbarContent\n        status={status}\n        contentprops={{\n          'aria-describedby': 'message-id'\n        }}\n        // prettier-ignore\n        message={(\n          <InfoWrapper id='message-id'>\n            {msg || status}\n          </InfoWrapper>\n        )}\n      />\n    </Snackbar>\n  );\n}\nexport default SimpleSnackbar;\n","/**\n * External dependencies\n */\nimport React, { Component, Fragment } from 'react';\nimport { map, upperFirst } from 'lodash';\nimport './style.scss';\n\n/**\n * Internal dependencies\n */\nimport Chars from './characters.json';\nimport SimpleSnackbar from '../snackbar';\n\n/**\n * WordPress dependencies\n */\nimport { Button, TabPanel, TextControl, Tooltip, ClipboardButton } from '@wordpress/components';\n\nclass Charmap extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      characters: Chars.Misc,\n\t  keyword: '',\n\t  date: '',\n\t  message: '',\n\t  copied: false,\n    };\n  }\n\n  onSearch(keyword) {\n    let filtered = {};\n\n    map(Chars, characters => {\n      map(characters, (character, key) => {\n        if (character.name.toLowerCase().search(keyword.toLowerCase()) !== -1) {\n          filtered = Object.assign({ [key]: character }, filtered);\n        }\n      });\n    });\n\n    this.setState({ keyword, characters: filtered });\n  }\n\n  render() {\n    const { name, value, isActive, onChange } = this.props;\n    const { characters, keyword, copied, date, message } = this.state;\n\n    const onSelect = tab => {\n      const tabContent = typeof Chars[tab] !== 'undefined' ? Chars[tab] : {};\n      this.setState({ characters: tabContent, keyword: '' });\n    };\n\n    let container = 'editorskit-charmap-popover';\n\n    if (keyword) {\n      container += ' is-searching';\n    }\n\n    return (\n      <Fragment>\n        <div className={container}>\n          <TextControl\n            value={keyword}\n            placeholder={'Search'}\n            onChange={newKeyword => {\n              this.onSearch(newKeyword);\n            }}\n          />\n          <TabPanel\n            className=\"editorskit-charmap-tabpanel\"\n            activeClass=\"is-active-tab\"\n            onSelect={onSelect}\n            tabs={[\n              {\n                name: 'Misc',\n                title: 'Misc',\n                className: 'editorskit-charmap-misc'\n              },\n              {\n                name: 'Math',\n                title: 'Math',\n                className: 'editorskit-charmap-math'\n              },\n              {\n                name: 'Latin',\n                title: 'Latin',\n                className: 'editorskit-charmap-latin'\n              },\n              {\n                name: 'Arrows',\n                title: 'Arrows',\n                className: 'editorskit-charmap-arrows'\n              }\n            ]}\n          >\n            {() => {\n              return (\n                <Fragment>\n                  {Object.keys(characters).length > 0 ? (\n                    <ul className=\"editorskit-charmap-list\">\n                      {map(characters, (character, key) => {\n                        return (\n                          <li key={'editorskit-charmap-' + key}>\n                            <Tooltip\n                              text={upperFirst(character.name.toLowerCase())}\n                            >\n                              <ClipboardButton\n                                text={character.char}\n                                onCopy={() => {\n\t\t\t\t\t\t\t\t\tthis.setState({\n\t\t\t\t\t\t\t\t\t\tcopied: true,\n\t\t\t\t\t\t\t\t\t\tdate: new Date(),\n\t\t\t\t\t\t\t\t\t\tmessage: 'Copied ' + character.char + ' to your clipboard.'\n\t\t\t\t\t\t\t\t\t});\n                                }}\n                              >\n                                {character.char}\n                              </ClipboardButton>\n                            </Tooltip>\n                          </li>\n                        );\n                      })}\n                    </ul>\n                  ) : (\n                    <p>{'No characters found.'}</p>\n                  )}\n                </Fragment>\n              );\n            }}\n          </TabPanel>\n        </div>\n        {copied ? <SimpleSnackbar key={date} status={message} /> : null}\n      </Fragment>\n    );\n  }\n}\n\nexport default Charmap;","import React from 'react';\nimport Charmap from './components/charmap/index';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"logo\">\n          <h1>\n            <span>Copy</span>\n            <span>Glyphs</span>\n          </h1>\n        </div>\n        <div className=\"desc\">\n          Copy & paste special characters and symbols with Ä“ase.\n        </div>\n      </header>\n      <Charmap />\n      <footer className=\"App-footer\">\n        <h2>About</h2>\n        <p>CopyGlyphs is a simple online tool that helps you easily copy any special characters and symbols (also known as glyphs) then paste them to any document or app that you are using.</p>\n        <h2>Using WordPress?</h2>\n        <p>Install and activate <a href=\"https://wordpress.org/plugins/block-options/\">EditorsKit Pluginâ†—</a> which is available for free on plugin directory. EditorsKit adds set of formatting tools and helps improve writing workflow when using WordPress Gutenberg block editor.</p>\n        <p>Made by <a href=\"https://jeffreycarandang.com/\">Jeffrey Carandangâ†—</a> - creator of EditorsKit plugin for WordPress.</p>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}